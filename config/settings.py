"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from datetime import timedelta
from drf_spectacular.openapi import AutoSchema
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()
import dj_database_url
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "dev-secret")
DEBUG =False
ALLOWED_HOSTS = ["*"]
RESEND_API_KEY = os.getenv("RESEND_API_KEY", "")
RESEND_FROM    = os.getenv("RESEND_FROM", "no-reply@niemr.app")
if not RESEND_API_KEY:
    raise RuntimeError("RESEND_API_KEY is required (Resend-only mode).")
EMAILS_WEBHOOK_SECRET = os.getenv("EMAILS_WEBHOOK_SECRET", "")  # optional Resend webhook signature secret
EMAILS_MAX_RETRIES = int(os.getenv("EMAILS_MAX_RETRIES", "6"))
EMAILS_RETRY_BACKOFF_SEC = int(os.getenv("EMAILS_RETRY_BACKOFF_SEC", "120"))
# Application definition
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.resend.com"
EMAIL_PORT = 465
EMAIL_USE_SSL = True          # <-- SMTPS
EMAIL_USE_TLS = False
EMAIL_HOST_USER = "resend"
EMAIL_HOST_PASSWORD = os.getenv("RESEND_API_KEY")
DEFAULT_FROM_EMAIL = "Niemr <no-reply@mail.niemr.africa>"

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    "core",
    "accounts",
    "facilities",
    "patients",
    "vitals",
    "encounters",
    "labs",
    "imaging",
    "pharmacy",
    "appointments",
    "billing",
    "attachments",
    "notifications",
    "providers",
    "audit",
    "emails",
    "reports",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "gunicorn",
    "storages",
    "corsheaders",
]

AUTH_USER_MODEL = "accounts.User"


REPORTS_ENABLE_PDF = os.getenv("REPORTS_ENABLE_PDF", "1") in ("1","true","True")

# Optional: default brand info for headers/footers
REPORTS_BRAND = {
    "name": os.getenv("REPORTS_BRAND_NAME", "NIEMR"),
    "address": os.getenv("REPORTS_BRAND_ADDR", "123 Health St, Lagos"),
    "phone": os.getenv("REPORTS_BRAND_PHONE", "+234-800-000-0000"),
    "email": os.getenv("REPORTS_BRAND_EMAIL", "care@niemr.app"),
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.schemas.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "NIEMR API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SECURITY": [{"bearerAuth": []}],
    "COMPONENTS": {
        "securitySchemes": {
            "bearerAuth": {"type": "http", "scheme": "bearer", "bearerFormat": "JWT"}
        }
    },
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=int(os.getenv("ACCESS_TOKEN_LIFETIME_MIN", "30"))),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=int(os.getenv("REFRESH_TOKEN_LIFETIME_DAYS", "7"))),
    "AUTH_HEADER_TYPES": ("Bearer", "JWT"),
}

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True           # since we’re using Authorization header for direct calls
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
CORS_ALLOW_HEADERS = ["authorization", "content-type", "accept", "origin", "x-requested-with"]


CSRF_TRUSTED_ORIGINS = ["http://localhost:3000"]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'audit.middleware.AuditRequestMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

EMAILS_PROVIDER = "RESEND"
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

STORAGES = {        
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },                      
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

DATABASES = {  # <— REPLACE
    "default": dj_database_url.config(
        env="DATABASE_URL",
        conn_max_age=60,
        ssl_require=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# Supabase S3 creds (from Storage -> Connection -> S3 protocol)
AWS_ACCESS_KEY_ID = os.getenv("SUPABASE_S3_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("SUPABASE_S3_SECRET_ACCESS_KEY")

# Your bucket name in Supabase Storage
AWS_STORAGE_BUCKET_NAME = os.getenv("SUPABASE_BUCKET", "media")

# Your project ref (the part before .storage.supabase.co) e.g. qfqzlsjkrgzbzxkgrpsk
SUPABASE_PROJECT_REF = os.getenv("SUPABASE_PROJECT_REF", "")

# Supabase S3 endpoint
AWS_S3_ENDPOINT_URL = f"https://{SUPABASE_PROJECT_REF}.storage.supabase.co/storage/v1/s3"
AWS_S3_REGION_NAME = "auto"
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_QUERYSTRING_AUTH = False

# Public vs Private media
# If your 'media' bucket is PUBLIC, set this False and MEDIA_URL becomes a public path.
# If your bucket is PRIVATE and you need signed URLs, set this True.
AWS_QUERYSTRING_AUTH = os.getenv("SUPABASE_MEDIA_SIGNED", "False").lower() == "true"

# MEDIA_URL for public bucket (no querystrings)
if not AWS_QUERYSTRING_AUTH and SUPABASE_PROJECT_REF:
    MEDIA_URL = f"https://{SUPABASE_PROJECT_REF}.storage.supabase.co/storage/v1/object/public/{AWS_STORAGE_BUCKET_NAME}/"
else:
    # fallback (Django will generate signed S3-style URLs when AWS_QUERYSTRING_AUTH=True)
    MEDIA_URL = "/media/"
# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = "Africa/Lagos"
USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
